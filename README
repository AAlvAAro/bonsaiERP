= Bonsai

Reverted to mysql

Bonsai is a financiery system that provides a simple solution to the comon needs
to control an organisation finances. Beatiful, simple

:w !ruby -c # Test synthax of ruby in vim


git checkout dev
git pull origin dev
touch tmp/restart.txt

PostgreSQL
sudo -u postgres psql template1

CREATE USER demo WITH CREATEDB PASSWORD 'demo123';

git in server: demo4321

cylobo75

GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, FILE, INDEX, ALTER, CREATE TEMPORARY TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON *.* TO 'demo'@'localhost';


taps server mysql://demo:demo123@localhost/bonsai_dev?encoding=utf8 demo demo123
taps pull postgres://demo:demo123@localhost/bonsai_dev http://demo:demo123@localhost:5000
transactions table currency_exchange_rate must be changed to decimal 14,4
payments table exchanege_rate change to decimal 14,4

----------------------------------------------------
"/opt/nginx
/home/bonsai/nginx


--------------------------------------------

Nginx with Passenger support was successfully installed.

Please edit your Nginx configuration file (probably /opt/nginx/conf/nginx.conf),
and set the passenger_root and passenger_ruby configuration options in the
'http' block, like this:

  http {
      ...
      passenger_root /home/bonsai/.rvm/gems/ruby-1.9.2-head/gems/passenger-3.0.6;
      passenger_ruby /home/bonsai/.rvm/wrappers/ruby-1.9.2-head/ruby;
      ...
  }

After you (re)start Nginx, you are ready to deploy any number of Ruby on Rails
applications on Nginx.


--------------------------------------------

Deploying a Ruby on Rails application: an example

Suppose you have a Ruby on Rails application in /somewhere. Add a server block
to your Nginx configuration file, set its root to /somewhere/public, and set
'passenger_enabled on', like this:

   server {
      listen 80;
      server_name www.yourhost.com;
      root /somewhere/public;   # <--- be sure to point to 'public'!
      passenger_enabled on;
   }

And that's it! You may also want to check the Users Guide for security and
optimization tips and other useful information:

  /home/bonsai/.rvm/gems/ruby-1.9.2-head/gems/passenger-3.0.6/doc/Users guide Nginx.html

Enjoy Phusion Passenger, a product of Phusion (www.phusion.nl) :-)
http://www.modrails.com/

Phusion Passenger is a trademark of Hongli Lai & Ninh Bui.

/home/bonsai/tmp/nginx-1.0.0

boris-Aspire-5570Z

Income

Using money_account
| Account | To   |
| contact | bank |

Using contact_account
| Account | To      |
| sales   | contact |


# Model to control income, buy or expense
class TransactionModel extends Backbone.Model
  dialog_open_on_change: true

  constructor: ( @currencies, @exchange_rates, @default_currency )->
    super({currency_id: @default_currency, exchange_rate: 1})

    @currency_id       = $('#transaction_currency_id')
    @currency_id_label = $('label[for=transaction_currency_id]')
    @exchange_rate     = $('#transaction_exchange_rate')
    @exchange_button   = $('#exchange_rate_button')

    @.setEvents()
    @.createExchangeRateDialog()

  # Init functions Events more related to change of attributes
  initialize: ->
    self = @

    @.bind "change:currency_id", -> self.dialogOpen()
    @.bind "change:currency_id", ->
      self.setExchangeRateHtml()

    @.bind "change:exchange_rate", ->
      self.setExchangeRateHtml()

  dialogOpen: ->
    $(@exchange_rate_dialog).dialog("open")
  # Events for showing not for interaction
  setEvents: ->
    self = @
    # Currency
    @currency_id.live 'change keyup', (event)->
      # Check the keyup event
      if event.type == "keyup" and not (event.keyCode == $.ui.keyCode.UP or evet.keyCode == $.ui.keyCode.DOWN)
        return false

      self.set {currency_id: $(this).val() * 1}

      #if self.dialog_open_on_change and self.get("currency_id") != self.default_currency
      #  $(self.exchange_rate_dialog).dialog("open")

    # Button
    @exchange_button.live 'click', ->
      $(self.exchange_rate_dialog).dialog("close")
      self.set({exchange_rate: $('#exchange_rate').val() * 1})
    # Edit link
    $('#exchange_rate_link').live 'click', ->
      $(self.exchange_rate_dialog).dialog("open")

  # Creates the exchange rate dialog
  createExchangeRateDialog: ->
    self = @
    @exchange_rate_dialog = createDialog(
      html: $('#currency_form').html()
      title: 'Tipo de cambio'
      autoOpen: false
      width: 500
      position: 'center'
      close: (event, ui)->
        $(this).hide()
        false
      open: (event, ui)->
        $('#exchange_rate').val(self.get("exchange_rate"))
    )
    $('#currency_form').remove()

  # Creates the HTML for the label
  setExchangeRateHtml: ->
    @currency_id_label.find('span.cont').remove()

    unless @.get('currency_id') == @default_currency
      html = ["<span class='cont n black'>", "Tipo de cambio ", @.getCurrencySymbol(@default_currency), " 1 = ",
      "<strong>", @.getCurrencySymbol(@.get('currency_id'))," ", _b.ntc(@.get('exchange_rate'), 4), "</strong>",
      "&nbsp;&nbsp;&nbsp;",  "<a href='javascript:' class='b pencil' id='exchange_rate_link'>editar</a>",
      "</span>"]

      @currency_id_label.append(html.join(""))

   # Gets the currency symbol
   getCurrencySymbol: (currency)->
     @currencies[currency].symbol

#class IncomeModel extends TransactionModel

#window.IncomeModel = IncomeModel
c_id = Category.first.id
@params = {:name_en => "Machine 1234", :name_de => "Machine 1234", :category_id => 1, :ctype => "Old machine", :machine_status_id => 1, :purchase_price => 100, :sales_price => 100 }

git push origin :branchname # Remove branch
git push origin :refs/tags/tagname #Remove tag

/home/bonsai/.rvm/wrappers/ruby-1.9.3-p0@rails3.1/rake

rake qu:work
CTR+Z
disown
