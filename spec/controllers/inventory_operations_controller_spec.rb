require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe InventoryOperationsController do
  describe "GET new_transaction for Income" do
    before(:each) do
      controller.stub!(:check_authorization! => true)
      mod = mock_model(Income, :id => 1, :contact_id => 1)
      Transaction.stub!(find: mod)
      InventoryOperation.stub!(:new => mock_model(InventoryOperation, :set_transaction => true) )
    end

    it 'should not allow out unless admin or gerency' do
      session[:user] = {:rol => 'admin'}

      get :new_transaction, :operation => 'in', :transaction_id => 1
      response.should_not be_redirect
    end

    it 'should not allow to other kind of users' do
      session[:user] = {:rol => 'operations'}

      get :new_transaction, :operation => 'in', :transaction_id => 1
      response.should be_redirect
    end
  end

  describe "GET new_transaction for Buy" do
    before(:each) do
      controller.stub!(:check_authorization! => true)
      mod = mock_model(Buy, :id => 1, :contact_id => 1)
      Transaction.stub!(:find => mod)
      InventoryOperation.stub!(:new => mock_model(InventoryOperation, :set_transaction => true) )
    end

    it 'should not allow out unless admin' do
      session[:user] = {:rol => 'admin'}

      get :new_transaction, :operation => 'in', :transaction_id => 1
      response.should_not be_redirect
    end

    it 'should not allow out unless gerency' do
      session[:user] = {:rol => 'gerency'}

      get :new_transaction, :operation => 'in', :transaction_id => 1
      response.should_not be_redirect
    end

    it 'should not allow to other kind of users' do
      session[:user] = {:rol => 'operations'}

      get :new_transaction, :operation => 'in', :transaction_id => 1
      response.should be_redirect
    end

    it 'should not allow to other kind of users' do
      session[:user] = {:rol => 'operations'}

      get :new_transaction, :operation => 'out', :transaction_id => 1
      response.should be_redirect
    end
  end

  require File.expand_path(File.dirname(__FILE__) + '/../spec_helper')
  
  describe "POST create_transaction" do
    let(:post_params){
      {:transaction_id => 1, :operation => 'in'}}
    before do
      controller.stub!(:check_authorization! => true)
    end

    it 'should redirect to user if Buy in' do
      mod = mock_model(Buy, :id => 1, :contact_id => 1)
      Transaction.stub!(:find => mod)
      session[:user] = {:rol => 'operations'}

      post :create_transaction, :inventory_operation => {:transaction_id => 1, :operation => 'in'}
      response.should redirect_to("/422")
    end

    it 'should redirect to user if Buy out' do
      mod = mock_model(Buy, :id => 1, :contact_id => 1)
      Transaction.stub!(:find => mod)
      session[:user] = {:rol => 'operations'}
      
      p_params = post_params.dup
      p_params.merge(:operation => '')

      post :create_transaction, :inventory_operation => {:transaction_id => 1, :operation => 'out'}
      response.should redirect_to("/422")
    end

    it 'should redirect to user if Income in' do
      mod = mock_model(Buy, :id => 1, :contact_id => 1)
      Transaction.stub!(:find => mod)
      session[:user] = {:rol => 'operations'}

      post :create_transaction, :inventory_operation => {:transaction_id => 1, :operation => 'in'}
      response.should redirect_to("/422")
    end

    it 'should not redirect if Income out' do
      mod = mock_model(Income, :id => 1, :contact_id => 1, 
                       :inventory_operations => stub(
                         :build => mock_model(InventoryOperation, :save_transaction => true, 
                                              :id => 1, :contact_id= => true)
                        )
                      )
      Transaction.stub!(:find => mod)
      session[:user] = {:rol => 'operations'}

      post :create_transaction, :inventory_operation => {:transaction_id => 1, :operation => 'out'}
      response.should redirect_to("/inventory_operations/1")
    end
  end

  describe "GET new_transference" do
    before do
      controller.stub!(:check_authorization! => true)
    end

    it 'should create an instance' do
      Store.stub!(:exists?).with("1").and_return(true)
      InventoryOperation.any_instance.stub(:create_ref_number).and_return("00")
      
      get :new_transference, store_id: 1

      response.should_not be_redirect
      assigns(:transference).class.should == ::Models::InventoryOperation::Transference

    end

    it 'should not allow if Sore not found' do
      Store.stub!(:exists?).with("1").and_return(false)

      get :new_transference, store_id: 1

      response.should be_redirect
    end
  end
end
